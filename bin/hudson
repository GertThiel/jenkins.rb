#!/usr/bin/env ruby
$:.unshift(File.expand_path(File.dirname(File.dirname(__FILE__) + "/../lib/hudson.rb")))
require File.dirname(__FILE__) + '/../lib/hudson'
require 'un'
require 'optparse'
require 'term/ansicolor' # gem: term-ansicolor

def display(text)
  puts text
  exit
end

def error(text)
  $stderr.puts "ERROR: #{text}"
  exit
end

options = {
  :port => 3001,
  :control => 3002,
  :home => File.join(ENV['HOME'], '.hudson')
}
args = ARGV.dup

c = Term::ANSIColor

opts = OptionParser.new do |opts|
  opts.banner = "Usage: hudson [command] [options] [HUDSON_HOME]"

  opts.on_tail("-v", "--version", "show version information") do
    display "#{Hudson::VERSION} (Hudson Server #{Hudson::HUDSON_VERSION})"
  end
  opts.on_tail("-h", "--help") do
    display opts
  end
  
end
if command = args.shift
  case command.to_sym
  when :server
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: hudson server [options] [HUDSON_HOME]"

      opts.on("-d", "--daemon", "fork into background and run as daemon") do
        options[:daemon] = true
      end

      opts.on("-p", "--port [3001]", "run hudson on specified port ") do |port|
        options[:port] = port
      end

      opts.on("-c", "--control-port [3002]", Integer, "set the shutdown/control port") do |port|
        options[:control] = cport
      end

      opts.on_tail("-k", "--kill", "send shutdown signal to control port") do
        require 'socket'
        TCPSocket.open("localhost", options[:control]) do |sock|
          sock.write("0")
        end
        exit
      end

      opts.on_tail("-h", "--help") { display opts }
    end
    
    opts.parse!(args)
    dir = args.shift || options[:home]
    FileUtils.mkdir_p dir
    FileUtils.cp_r Hudson::PLUGINS, dir
    ENV['HUDSON_HOME'] = dir
    cmd = ["java", "-jar", Hudson::WAR]
    cmd << "--httpPort=#{options[:port]}"
    cmd << "--controlPort=#{options[:control]}"
    cmd << "--daemon" if options[:daemon]
    puts cmd.join(" ")
    exec(*cmd)
  when :create
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: hudson create [project_path] [options]"

      opts.on("-n", "--name [dir_name]", "name of hudson job") { |name| options[:name] = name }
      opts.on_tail("-h", "--help") { display opts }
    end
    
    opts.parse!(args)
    project_path = args.shift || "."
    FileUtils.chdir(project_path) do
      unless scm = Hudson::ProjectScm.discover
        error "Cannot determine project SCM. Currently supported: #{Hudson::ProjectScm.supported}"
      end
      job_config = Hudson::JobConfigBuilder.new(:rubygem) do |c|
        c.scm = scm.url
      end
      name = options[:name] || File.basename(FileUtils.pwd)
      host = ENV['HUDSON_HOST'] || 'localhost'
      port = ENV['HUDSON_PORT'] || '3001'
      Hudson::Api.setup_base_url(host, port)
      job = Hudson::Api.create_job(name, job_config)
      require "pp"
      puts job.body
      puts job.code
      puts job.message
      puts job.headers
    end
  when :list
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: hudson list [project_path] [options]"
      opts.on_tail("-h", "--help") { display opts }
    end
    
    opts.parse!(args)
    project_path = args.shift || "."
    FileUtils.chdir(project_path) do
      host = ENV['HUDSON_HOST'] || 'localhost'
      port = ENV['HUDSON_PORT'] || '3001'
      Hudson::Api.setup_base_url(host, port)
      summary = Hudson::Api.summary
      summary["jobs"].each do |job|
        name, url, color = job['name'], job['url'], c.send(job['color'].to_sym)
        print color, name, c.reset, " - ", url, "\n"
      end
    end
  else
    error "Unknown command '#{command}'"
  end
else
  puts opts
end

